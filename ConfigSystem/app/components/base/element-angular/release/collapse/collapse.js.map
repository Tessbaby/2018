{"version":3,"sources":["../../src/collapse/collapse.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,YAAA,EAAc,KAAA,EAAO,MAAA,EAAO,MAAA,eAAA,CAAA;AAEhD,MAEC;IAGD;QAHG,cAAS,GAEY,KAAA,CAAA;QADrB,UAAK,GAEiB,EAAA,CAAA;QADtB,gBAAW,GAE+B,IAAI,YAAA,EAA0B,CAAA;IAAzE,CAAC;IACH;;;OAGG;IACH,WAAG,CAAA,KAAA;QACC,MAAM,gBAAgB,CAAhB,KAAA,GAAQ,IAAA,CAAK,KAAC,CAAK,SAAC,CAAS,GAAC,CAAG,EAAA,CAAG,GAAA,KAAQ,KAAA,CAAM,CAAA;QACxD,EAAE,CAAC,CAAC,KAAC,GAAO,CAAA,CAAE,CAAC,CAAA;YACb,IAAI,CAAC,SAAC,IAAY,CAAA,IAAE,CAAI,KAAC,GAAO,EAAA,CAAG,CAAA;YACnC,IAAI,CAAC,KAAC,CAAK,IAAC,CAAI,KAAC,CAAK,CAAA;YACtB,MAAM,CAAC,IAAA,CAAK,WAAC,CAAW,IAAC,CAAI,IAAC,CAAI,KAAC,CAAK,CAAA;QAC1C,CAAC;QACD,EAAE,CAAC,CAAC,IAAC,CAAI,SAAC,CAAS,CAAC,CAAA;YAClB,IAAI,CAAC,KAAC,GAAO,EAAA,CAAA;QACf,CAAC;QAAC,IAAA,CAAK,CAAA;YACL,IAAI,CAAC,KAAC,CAAK,MAAC,CAAM,KAAC,EAAM,CAAA,CAAE,CAAA;QAC7B,CAAC;QACD,IAAI,CAAC,WAAC,CAAW,IAAC,CAAI,IAAC,CAAI,KAAC,CAAK,CAAA;IACnC,CAAC;;AAEI,qBAAA,GAAoC;IAC3C,EAAE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBACvB,QAAQ,EAAE,aAAA;gBACV,QAAQ,EAAE;;;;GAIT;aACF,EAAC,EAAG;CACJ,CAAC;AACF;;GAEG;AADF,yBAAA,GAAA,GAAA,EAAA,CAAA,EAGA,CAAC;AADK,yBAAA,GAAyD;IAGhE,WAAW,EAFE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAG9B,OAAO,EAFE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAG1B,aAXE,EASa,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;CAGhC,CAFC;AAKF;IACA,gBAAgB;IAChB,UAAU,CAAC,UAAU,CAAC;IACtB;;;OAGG;IACH,UAAU,CAAC,cAAc,CAAC;IAC1B,gBAAgB;IAChB,UAAU,CAAC,cAAc,CAAC;IAC1B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC;IAC/B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC;IAC3B,gBAAgB;IAChB,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC;AACjC,CAAC","file":"collapse.js","sourceRoot":"","sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nexport type ModelValue = string | number\nexport class ElCollapse {\n  \n   accordion: boolean = false\n   model: ModelValue[] = []\n   modelChange: EventEmitter<ModelValue[]> = new EventEmitter<ModelValue[]>()\nconstructor() {\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nupdateModel(value: ModelValue): void {\n    const /** @type {?} */ index = this.model.findIndex(val => val === value)\n    if (index < 0) {\n      this.accordion && (this.model = [])\n      this.model.push(value)\n      return this.modelChange.emit(this.model)\n    }\n    if (this.accordion) {\n      this.model = []\n    } else {\n      this.model.splice(index, 1)\n    }\n    this.modelChange.emit(this.model)\n  }\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-collapse',\n  template: `\n    <div class=\"el-collapse\" role=\"tablist\" aria-multiselectable=\"true\">\n      <ng-content></ng-content>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'accordion': [{ type: Input },],\n'model': [{ type: Input },],\n'modelChange': [{ type: Output },],\n};\n}\n\nfunction ElCollapse_tsickle_Closure_declarations() {\n/** @type {?} */\nElCollapse.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElCollapse.ctorParameters;\n/** @type {?} */\nElCollapse.propDecorators;\n/** @type {?} */\nElCollapse.prototype.accordion;\n/** @type {?} */\nElCollapse.prototype.model;\n/** @type {?} */\nElCollapse.prototype.modelChange;\n}\n\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}