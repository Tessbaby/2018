{"version":3,"sources":["../../src/radio/radio.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EAAE,KAAA,EAAO,MAAA,EAAQ,YAAA,EAAc,UAAA,EAAY,QAAA,EAAkB,UAAA,GACvE,MAAM,eAAA,CAAgB;AACvB,OAAO,EAAE,YAAA,EAAa,MAAA,eAAA,CAAA;AACtB,OAAO,EAAE,WAAA,EAAa,WAAA,EAAY,MAAA,uBAAA,CAAA;AAClC,OAAO,EAAwB,iBAAA,EAAkB,MAAA,gBAAA,CAAA;AACjD,MAEC;IAQD;;;OAGG;IACH,YAAa,SAAW,EACZ,EAAI;QADH,cAAA,GAAA,SAAA,CAAW;QACZ,OAAA,GAAA,EAAA,CAAI;QAbb,aAAQ,GAEY,KAAA,CAAA;QADpB,UAAK,GAEoB,EAAA,CAAA;QADzB,eAAU,GAEW,EAAA,CAAA;QAArB,gBAAW,GAEsB,IAAI,YAAA,EAAiB,CAAA;QAAvD,YAAO,GAEY,KAAA,CAAA;QADnB,kBAAa,GAEY,KAAA,CAAA;QA4CjB,kBAAA,GAA0B,GAAG,EAAA,GAAG,CAAA,CAAA;QAChC,iBAAA,GAAyB,GAAG,EAAA,GAAG,CAAA,CAAA;IAtCvC,CAAC;IACH;;OAEG;IACH,YAHG;QAIC,EAAE,CAAC,CAAC,IAHC,CAAI,aAAC,CAAa,CAAC,CAAA;YAItB,MAAM,CAHC,IAAA,CAAK,SAAC,CAAS,YAAC,CAAY,IAAC,CAAI,KAAC,CAAK,CAAA;QAIhD,CAAC;QACD,IAAI,CAHC,KAAC,GAAO,IAAA,CAAK,KAAC,CAAA;QAInB,IAAI,CAHC,WAAC,CAAW,IAAC,CAAI,IAAC,CAAI,KAAC,CAAK,CAAA;QAIjC,IAAI,CAHC,aAAC,CAAa,IAAC,CAAI,KAAC,CAAK,CAAA;IAIhC,CAAC;IACH;;OAEG;IACH,QALG;QAMC,MAAM,gBAAgB,CALhB,aAAA,GAAgB,IAAA,CAAK,EAAC,CAAE,aAAC,CAAA;QAM/B,MAAM,gBAAgB,CALhB,MAAA,GAAS,GAAG,EAAA;YAMhB,IAAI,CALC,QAAC,GAAU,IAAA,CAAK,SAAC,CAAS,QAAC,CAAA;YAMhC,IAAI,CALC,KAAC,GAAO,IAAA,CAAK,SAAC,CAAS,KAAC,CAAA;QAM/B,CAAC,CAAA;QACD,IAAI,CALC,aAAC,GAAe,WAAA,CAAY,aAAC,EAAc,gBAAA,CAAiB,CAAA;QAMjE,WAAW,CALC,aAAC,CAAa,CAAA;QAO1B,EAAE,CAAC,CAAC,IALC,CAAI,aAAC,IAAgB,IAAA,CAAK,SAAC,CAAS,CAAC,CAAA;YAMxC,MAAM,EALC,CAAA;YAMP,IAAI,CALC,SAAC,CAAS,UAAC,CAAU,IAAC,CAAI,MAAC,CAAM,CAAA;QAMxC,CAAC;IACH,CAAC;IACH;;;OAGG;IACH,UARG,CAAA,KAAA;QASC,IAAI,CARC,KAAC,GAAO,KAAA,CAAA;IASf,CAAC;IACH;;;OAGG;IACH,gBAXG,CAAA,EAAA;QAYC,IAAI,CAXC,aAAC,GAAe,EAAA,CAAA;IAYvB,CAAC;IACH;;;OAGG;IACH,iBAdG,CAAA,EAAA;QAeC,IAAI,CAdC,YAAC,GAAc,EAAA,CAAA;IAetB,CAAC;;AATI,kBAAA,GAAoC;IAc3C,EAbE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAcvB,QAAQ,EAbE,UAAA;gBAcV,SAAS,EAbE,CAAA;wBAcT,OAAO,EAbE,iBAAA;wBAcT,WAAW,EAbE,UAAA,CAAW,GAAG,EAAA,CAAG,OAAA,CAAQ;wBActC,KAAK,EAbE,IAAA;qBAcR,CAbC;gBAcF,QAAQ,EAbE;;;;;;;;;;;;;;;GA4BT;aACF,EAbC,EAAG;CAcJ,CAbC;AAcF;;GAEG;AAdF,sBAAA,GAAA,GAAA,EAAA,CAAA;IAgBD,EAAC,IAAI,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;IACxD,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,CAAC;AAdK,sBAAA,GAAyD;IAgBhE,UAAU,EAfE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAgB7B,OAAO,EAfE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAgB1B,YAAY,EAfE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,MAAE,EAAM,EAAG,EAAE;IAgBjD,OAAO,EAfE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAgB1B,aAAa,EAfE,CAAA,EAAG,IAAA,EAAM,MAAA,EAAO,EAAE;CAgBhC,CAfC;AAkBF;IACA,gBAAgB;IAChB,OAAO,CAAC,UAAU,CAAC;IACnB;;;OAGG;IACH,OAAO,CAAC,cAAc,CAAC;IACvB,gBAAgB;IAChB,OAAO,CAAC,cAAc,CAAC;IACvB,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC3B,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC;IACxB,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC;IAC7B,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC;IACxB,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC;IAC9B,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC;IAC1B,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC;IAChC,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC;IAChC,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC;IAC/B,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC;IAC5B,gBAAgB;IAChB,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;AACrB,CAAC","file":"radio.js","sourceRoot":"","sourcesContent":["import {\n  Component, Input, Output, EventEmitter, ElementRef, Optional, OnInit, forwardRef,\n} from '@angular/core';\nimport { ElRadioGroup } from './radio-group';\nimport { isParentTag, removeNgTag } from '../shared/utils/index';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nexport class ElRadio implements OnInit, ControlValueAccessor {\n  \n   disabled: boolean = false\n   label: string | number = ''\n   nativeName: string = ''\n   model: any\n   modelChange: EventEmitter<any> = new EventEmitter<any>()\n  \n  isFocus: boolean = false\n  parentIsGroup: boolean = false\n/**\n * @param {?} rootGroup\n * @param {?} el\n */\nconstructor(\nprivate rootGroup: ElRadioGroup,\nprivate el: ElementRef,\n  ) {\n  }\n/**\n * @return {?}\n */\nchangeHandle(): void {\n    if (this.parentIsGroup) {\n      return this.rootGroup.changeHandle(this.label)\n    }\n    this.model = this.label\n    this.modelChange.emit(this.label)\n    this.controlChange(this.label)\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    const /** @type {?} */ nativeElement = this.el.nativeElement\n    const /** @type {?} */ update = () => {\n      this.disabled = this.rootGroup.disabled\n      this.model = this.rootGroup.model\n    }\n    this.parentIsGroup = isParentTag(nativeElement, 'el-radio-group')\n    removeNgTag(nativeElement)\n    \n    if (this.parentIsGroup && this.rootGroup) {\n      update()\n      this.rootGroup.subscriber.push(update)\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.model = value\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: Function): void {\n    this.controlChange = fn\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: Function): void {\n    this.controlTouch = fn\n  }\nprivate controlChange: Function = () => {}\nprivate controlTouch: Function = () => {}\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-radio',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ElRadio),\n    multi: true\n  }],\n  template: `\n    <label class=\"el-radio\" role=\"radio\" tabindex=\"0\">\n      <span class=\"el-radio__input\"\n        style=\"float: left;\"\n        [class.is-disabled]=\"disabled\"\n        [class.is-checked]=\"model === label\"\n        [class.is-focus]=\"isFocus\">\n        <span class=\"el-radio__inner\"></span>\n        <input class=\"el-radio__original\" type=\"radio\"\n          [value]=\"label\" [name]=\"nativeName\" [disabled]=\"disabled\"\n          (focus)=\"isFocus = true\" (blur)=\"isFocus = false\"\n          [ngModel]=\"model\" (ngModelChange)=\"changeHandle()\">\n      </span>\n      <span class=\"el-radio__label\"><ng-content></ng-content></span>\n    </label>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'label': [{ type: Input },],\n'nativeName': [{ type: Input, args: ['name', ] },],\n'model': [{ type: Input },],\n'modelChange': [{ type: Output },],\n};\n}\n\nfunction ElRadio_tsickle_Closure_declarations() {\n/** @type {?} */\nElRadio.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElRadio.ctorParameters;\n/** @type {?} */\nElRadio.propDecorators;\n/** @type {?} */\nElRadio.prototype.disabled;\n/** @type {?} */\nElRadio.prototype.label;\n/** @type {?} */\nElRadio.prototype.nativeName;\n/** @type {?} */\nElRadio.prototype.model;\n/** @type {?} */\nElRadio.prototype.modelChange;\n/** @type {?} */\nElRadio.prototype.isFocus;\n/** @type {?} */\nElRadio.prototype.parentIsGroup;\n/** @type {?} */\nElRadio.prototype.controlChange;\n/** @type {?} */\nElRadio.prototype.controlTouch;\n/** @type {?} */\nElRadio.prototype.rootGroup;\n/** @type {?} */\nElRadio.prototype.el;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}